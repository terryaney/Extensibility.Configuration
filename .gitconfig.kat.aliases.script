#!/bin/bash

# Specifying file and function in external scripts - https://stackoverflow.com/a/46435987/166231
# Passing arguments to bash scripts - https://stackoverflow.com/questions/55161288/how-to-pass-parameters-to-from-git-alias-to-external-script

showFileHistory() {
	if [ "$#" = 1 ] && ( test "$1" == "?" || test "$1" == "-?" || test "$1" == "/?" ) 
	then	
		showHelp="y"
	fi

	if [ "$#" = 0 ] || [ "$showHelp" = "y" ] || [ "$1" = "bash" ]
	then

		echo -e "\n Show commits where <file> is part of the commit\n"
		echo -e " usage: git fhs <file> {#}"
		echo -e " Defaults: \033[1;32m #\033[0m - Number of log entries, by default last 5 (git l 5)"

	    if [ "$showHelp" != "y" ]
	    then
	    	echo -e "\n\033[1;31m Incorrect parameters provided.\033[0m"
	    	exit 1
	    fi
	else
		showMyLog -ff "$1" $2	
	fi	
}

showMyLog() {
	if [ "$#" = 1 ] && ( test "$1" == "?" || test "$1" == "-?" || test "$1" == "/?" )
	then
		echo -e "\nShow preferred KAT output format for logs.  optional parameters:\n"
		echo -e "\033[1;32m #\033[0m - Number of log entries, by default last 5 (git l 5)"
		echo -e "\033[1;32m graph\033[0m - Show Graph. Include the git branch graph in the output (git l 5 graph)"
		echo -e "\033[1;32m s\033[0m - Full Subject. Include the full subject in the output, default is truncated at 70 characters (git l 5 s)"
		echo -e "\033[1;32m m\033[0m- Full Message. Include the full message in the output (git l 5 m)"
		echo -e "\033[1;32m f\033[0m - Show Files. Include listing of files affected by each commit in the output (git l 5 f)"
		echo -e "\033[1;32m ff <file>\033[0m - Follow file.  Only show the last # of commits where <file> is part of the commit (git l ff Test.txt)"
		echo -e ""
		echo -e "\033[1;32m Combine Parameters\033[0m - Combine parameters by placing space between parameters.  (git l s f)"
		echo -e "\033[1;32m Notes\033[0m - Parameters can be prefixed with - as well (git l -s -f).  Can use full names as well. s(ubject), m(essage), f(iles) or follow (for ff)."
	else
		# Default parameter values
	    graph=""
	    entries=5
	    subject=" %<(70,trunc)%s"
	    body=""
	    showFiles=""
	    follow=""
	    numPattern="^[+-]?[0-9]+([.][0-9]+)?$"

	    # Parse all parameter values
	    while [ $# -gt 0 ]; do 
	      var=${1}

	      if test "graph" == "$var" || test "g" == "$var" || test "-g" == "$var" || test "-graph" == "$var"; then 

	        graph=" --graph"

	      elif test "s" == "$var" || test "-s" == "$var" || test "subject" == "$var" || test "-subject" == "$var"; then 

	        subject="%n %s"

	      elif test "m" == "$var" || test "-m" == "$var" || test "message" == "$var" || test "-message" == "$var"; then

			# linefeed, then body
	        body=" %+b"

	      elif test "f" == "$var" || test "-f" == "$var" || test "files" == "$var" || test "-files" == "$var"; then

	        showFiles=" --name-only"

	      elif test "ff" == "$var" || test "-ff" == "$var" || test "follow" == "$var" || test "-follow" == "$var"; then

	      	# Read next param for the file name, then remove it
	        follow=" --follow ${2}"
	        shift

	      elif test "bash" != "$var"; then

	        entries=$var

	      fi

	      # Remove processed param
	      shift

	    done

	    echo ""
	    # pretty="%C(auto)%h%Creset %<(15,trunc)%cn %C(dim yellow)%ad%Creset${subject}${body}"
	    pretty="%C(auto)%h%Creset %C(green)%ad %C(bold cyan)%<(15,trunc)%an%Creset${subject}%C(green)%d%Creset${body}" 

		# echo "--pretty=\"format:${pretty}\" -${entries} --date=short${graph}${showFiles}${follow}"
	    git log --pretty="format:${pretty}" -${entries} --date=short${graph}${showFiles}${follow}
	    exit 0
	fi		
}

queueBuild() {
   # Get the first .csproj file in the current directory
    csprojFile=$(find . -maxdepth 1 -name "*.csproj" | head -n 1)

    if [ -z "$csprojFile" ]; then
        echo "No .csproj file found in the current directory." >&2
        exit 1
    fi

    # Define the path to lprun.exe and the script to run
	csprojFilePath=$(realpath "$csprojFile")

	# Replace forward slashes with backslashes
	csprojFilePath=$(echo "$csprojFilePath" | sed 's|/|\\|g')

	# Convert the leading '/c/' to 'C:\' (assuming the path is on the C: drive)
	csprojFilePath=$(echo "$csprojFilePath" | sed 's|^\\c\\|C:\\|')

    lprunPath="lprun8.exe"
    scriptPath="C:\BTR\Extensibility\Build.Scripts\Build.Events.linq"

    # Define the arguments
    projectFileArg="ProjectFile:$csprojFilePath"

    # Run lprun.exe with the arguments
    $lprunPath "$scriptPath" "$projectFileArg" "GitType:synced" "Command:queue.cicd"
}

openRepoInBrowser() {
	REPO_URL=$(git config remote.${1}.url)

	if test "" == "$REPO_URL"; then
		REPO_URL=$(git config remote.origin.url)
	fi

	if test ".git" == "${REPO_URL: -4}"; then
		REPO_URL=${REPO_URL::-4};
	fi

	find=$2;
	replace=$3;
	suffix=$4;

	REPO_URL="${REPO_URL//${find}/${replace}}/${suffix}"

    start $REPO_URL
    exit 0;
}

openGitHubInBrowser() {
	openRepoInBrowser "gh" "git@github.com:" "https://github.com/" "commits"
}

openBitbucketInBrowser() {
	openRepoInBrowser "bb" "git@bitbucket.org:" "https://bitbucket.org/" "commits"
}

openTFSInBrowser() {
	openRepoInBrowser "tfs" "ssh://tfs.acsgs.com:22/" "https://tfs.acsgs.com/" "history?_a=history"
}

undoFile() {
	# Because of way I pass in parameters, 'bash' is always first param
	# "!bash -c 'source $HOME/.gitconfig.kat.aliases.script && undoFile \"$0\" \"$@\"' bash"

	if [ "$#" = 2 ] && ( test "$2" == "?" || test "$2" == "-?" || test "$2" == "/?" ) 
	then	
		showHelp="y"
	fi

	if [ "$#" -gt 3 ] || [ "$showHelp" = "y" ]
	then
		echo -e "\n Undo changes (same as \033[1;36mgit co -- <pattern>\033[0m)."
	    echo ""
	    echo -e " usage: git undo <pattern>"

	    if test "$showHelp" != "y"
	    then
	    	echo -e "\n\033[1;31m Incorrect parameters provided.\033[0m"
	    	exit 1
	    fi

	else

		git checkout -- "$2"

	fi
}

showIgnored() {
	# https://www.iditect.com/how-to/57136185.html (his 'My Kung-Fu' comment)
	if [ "$#" = 1 ] && ( test "$1" == "?" || test "$1" == "-?" || test "$1" == "/?" )
	then
		echo -e "\n Displays all directories ignored in the repository with optional summary output.  optional parameters:\n"
		echo -e "\033[1;32m <path>\033[0m - Show reason a specific file or directory is ignored"
	else
		# Directories already reported
		directories=()

		# If <path> passed in, check for it specifically (not sure why 'bash' is passed in if you run the command with no params)
		if [ "$#" = 1 ] && test "$1" != "bash"
		then
			ignores=$(git check-ignore -v "$1")

			if [ ${#ignores[@]} = 0 ] || test "${ignores[0]}" == ""
			then
				echo "$1 is not ignored"
			fi
		else
			ignores=$(find . | git check-ignore -v --stdin)
		fi	

		while read i
		do 
			parts=($i)
			include="1"

			for value in "${directories[@]}"
			do
				# If current directory from check-ignore starts with already reported directory, skip it
				if [[ ${parts[1]} == ${value}* ]]
				then
					include="0"
					break
				fi
			done

			if test "$include" = "1" && test "$i" != ""
			then			
				directories+=("${parts[1]}")
				echo "$i"
			fi	

		done <<< "$ignores"
	fi	
}

showDeletes() {
	if [ "$#" = 1 ] && ( test "$1" == "?" || test "$1" == "-?" || test "$1" == "/?" )
	then
		echo -e " Displays all commits with files deleted from a repository with optional summary output.  optional parameters:\n"
		echo -e "\033[1;32m d\033[0m - Show Detail. Include full commit subject/comment in the output."
	else
		if [ "$#" = 1 ] && ( test "$1" == "d" || test "$1" == "-d" || test "$1" == "-detail" || test "$1" == "detail" )
		then
			git log --diff-filter=D --summary
		else
			git log --diff-filter=D --summary | grep -e commit -e delete
		fi	
	fi	
}

runDiffTool() {
	# Because of way I pass in parameters, 'bash' is always first param
	# "!bash -c 'source $HOME/.gitconfig.kat.aliases.script && runDiffTool \"$0\" \"$@\"' bash"
	
	# Show differences between working directory and commit (index if not supplied), optionally specifying one file
	# dt - all diffs between working directory and index
	# dt readme.txt - readme.txt diffs between working directory and index
	# dt readme.txt HEAD^^ - readme.txt diffs between working directory and HEAD^^
	if [ "$#" = 2 ] && ( test "$2" == "?" || test "$2" == "-?" || test "$2" == "/?" )
	then
		echo -e " Show all diffs between working directory and index.  usage:"
		echo -e "\033[1;36m git dt\033[0m - all diffs between working directory and index"
		echo -e "\033[1;36m git dt readme.txt\033[0m - readme.txt diffs between working directory and index"
		echo -e "\033[1;36m git dt readme.txt HEAD^^\033[0m - readme.txt diffs between working directory and HEAD^^"
		
		echoDiffToolOverview
	else
		if [ "$#" = 1 ]
		then
			git difftool --no-prompt
		elif [ "$#" = 2 ]
		then
			git difftool --no-prompt "$2"
		else
			git difftool --no-prompt "$3" ${2+-- "$2"}
		fi	
	fi	
}

checkoutRemoteBranch() {
	if [ "$#" = 2 ] 
	then
		git fetch
		# ParamCount
		git co -b $2 $1/$2
		exit 0
	else
		echo -e "usage: git co-rb <origin> <branch>"
    	echo -e "\n\033[1;31m Incorrect parameters provided.\033[0m"
		exit 1
	fi	
}

deleteRemoteBranch() {
	# TODO: Don't allow $2 = current branch

	if [ "$#" = 2 ] 
	then
		git push $1 :$2
		git br -D $2
		exit 0
	else
		echo -e "usage: git del-rb <remote> <branch> - you must provide both parameters"
    	echo -e "\n\033[1;31m Incorrect parameters provided.\033[0m"
		exit 1
	fi	
}

pullPreviousFile() {

	if [ "$#" = 1 ] && ( test "$1" == "?" || test "$1" == "-?" || test "$1" == "/?" ) 
	then	
		showHelp="y"
	fi

	if [ "$#" != 2 ] || [ "$showHelp" = "y" ]
	then
		echo -e "\n Pulls a file from previous commit into your working directory. usage:\n"
	    echo -e "\033[1;36m git prev <commit> <file>\033[0m"
	    echo -e "\033[1;36m git prev HEAD^ readme.txt\033[0m pulls readme.txt from second to last commit"

	    if [ "$showHelp" != "y" ]
	    then
	    	echo -e "\n\033[1;31m Incorrect parameters provided.\033[0m"
	    	exit 1
	    fi

	else

		# Get previous file
		git checkout $1 $2
		# Move from staging into WD
		git reset HEAD $2

	fi		
}

fileChangesBetweenBranches() {

	if [ "$#" = 1 ] && ( test "$1" == "?" || test "$1" == "-?" || test "$1" == "/?" ) 
	then	
		showHelp="y"
	fi

	if [ "$#" = 0 ] || [ "$#" -gt 2 ] || [ "$showHelp" = "y" ] || [ "$1" = "bash" ]
	then

		echo -e "\n Displays all files changed between \033[1;32mbranches\033[0m.\n"
		echo -e " usage: git ch-b <branch1> {branch2}"
	    echo -e " defaults: branch2 - current branch"

	    if [ "$showHelp" != "y" ]
	    then
	    	echo -e "\n\033[1;31m Incorrect parameters provided.\033[0m"
	    	exit 1
	    fi
	else
      
		start=${1-main}
		end=$2

		if test "" == "$2"
		then
			end=$(git rev-parse --abbrev-ref HEAD)
		fi

		echo "Listing file changes between $start and $end..."

		git diff --name-status ${start} ${end}
	fi	
}

undeleteFile() {

	if [ "$#" = 1 ] && ( test "$1" == "?" || test "$1" == "-?" || test "$1" == "/?" ) 
	then	
		showHelp="y"
	fi

	if [ "$#" = 0 ] || [ "$showHelp" = "y" ] || [ "$1" = "bash" ]
	then

		echo -e "\n Recovers a file from the parent of the deleting commit.\n"
		echo -e " usage: git undelete <filename>"

	    if [ "$showHelp" != "y" ]
	    then
	    	echo -e "\n\033[1;31m Incorrect parameters provided.\033[0m"
	    	exit 1
	    fi
	else

		git checkout $(git rev-list -n 1 HEAD -- "$1")^ -- "$1"
      
	fi	
}

differencesBetweenBranches() {

	if [ "$#" = 1 ] && ( test "$1" == "?" || test "$1" == "-?" || test "$1" == "/?" ) 
	then	
		showHelp="y"
	fi

	if [ "$#" != 2 ] || [ "$showHelp" = "y" ]
	then

		echo -e "\n Displays file differences between \033[1;32mbranches\033[0m. usage: git dt-b <branch> <file>\n"
	    echo -e "\033[1;36m git dt-b FeatureBr readme.txt\033[0m displays all readme.txt diffs between \033[1;32mcurrent branch\033[0m and \033[1;32mFeatureBr\033[0m."

	    if [ "$showHelp" != "y" ]
	    then
	    	echo -e "\n\033[1;31m Incorrect parameters provided.\033[0m"
	    	exit 1
	    fi

	else

		br=$(git rev-parse --abbrev-ref HEAD)
		echo "Displaying Differences between $br and $1..."
		git difftool --no-prompt $br..$1 -- "$2"

	fi	
}

differencesBetweenCommits() {

	if [ "$#" = 1 ] && ( test "$1" == "?" || test "$1" == "-?" || test "$1" == "/?" ) 
	then	
		showHelp="y"
	fi

	if [ "$#" -gt 3 ] || [ "$showHelp" = "y" ]
	then
		echo -e "\n Displays differences between \033[1;32mcommits\033[0m, optionally specifiying file pattern.\n"
	    echo -e " usage:\tgit dt-c {commit1} {commit2} {pattern}"
	    echo -e " defaults: commit1 - HEAD, commit2 - <commit1>~1, pattern - all files"
	    echo ""
	    echo -e " \033[1;36m git dt-c\033[0m displays all diffs between HEAD and HEAD~1"
	    echo -e " \033[1;36m git dt-c HEAD\033[0m displays all diffs between HEAD and HEAD~1"
	    echo -e " \033[1;36m git dt-c HEAD HEAD~2\033[0m displays all diffs between HEAD and HEAD~2"
	    echo -e " \033[1;36m git dt-c HEAD HEAD~2 readme.txt\033[0m displays readme.txt diffs between HEAD and HEAD~2"

	    if test "$showHelp" != "y"
	    then
	    	echo -e "\n\033[1;31m Incorrect parameters provided.\033[0m"
	    	exit 1
	    fi

	else
		commit1="$1"
		if test "$1" == "bash"
		then
			commit1="HEAD"
		fi

		echo "Displaying Differences between $commit1 and ${2-$commit1^}..."
		git difftool --no-prompt $commit1 ${2-$commit1^} ${3+-- "$3"}

	fi	
}

differencesBetweenIndexAndHead() {

	if [ "$#" = 1 ] && ( test "$1" == "?" || test "$1" == "-?" || test "$1" == "/?" ) 
	then	
		showHelp="y"
	fi

	if [ "$#" -gt 1 ] || [ "$showHelp" = "y" ]
	then
		echo -e "\n Displays differences between \033[1;32mStaging Area\033[0m and \033[1;32mMost Recent Commit\033[0m, optionally specifiying"
		echo -e " a file pattern. Use this when you have added files with \033[1;36mgit add\033[0m and you want to see the"
		echo -e " difference of the already added files in the \033[1;32mStaging Area\033[0m."
	    echo ""
	    echo -e " usage: git dt-s {pattern}"

		echoDiffToolOverview

	    if test "$showHelp" != "y"
	    then
	    	echo -e "\n\033[1;31m Incorrect parameters provided.\033[0m"
	    	exit 1
	    fi

	else

		if test "$1" == "bash"
		then
			git difftool --cached --no-prompt
		else
			git difftool --cached --no-prompt ${1+-- "$1"}
		fi
	
	fi	
}

differencesBetweenWDAndHead() {

	if [ "$#" = 1 ] && ( test "$1" == "?" || test "$1" == "-?" || test "$1" == "/?" ) 
	then	
		showHelp="y"
	fi

	if [ "$#" -gt 1 ] || [ "$showHelp" = "y" ]
	then
		echo -e "\n Displays differences between \033[1;32mWorking Directory\033[0m and \033[1;32mMost Recent Commit\033[0m, optionally specifiying"
		echo -e " a file pattern. Use this when you have added files with \033[1;36mgit add\033[0m and you want to compare"
		echo -e " your \033[1;32mWorking Directory\033[0m to \033[1;32mMost Recent Commit\033[0m."
	    echo ""
	    echo -e " usage: git dt-w {pattern}"

		echoDiffToolOverview

	    if test "$showHelp" != "y"
	    then
	    	echo -e "\n\033[1;31m Incorrect parameters provided.\033[0m"
	    	exit 1
	    fi

	else

		if test "$1" == "bash"
		then
			git difftool HEAD --no-prompt
		else
			git difftool HEAD --no-prompt ${1+-- "$1"}
		fi
	
	fi	
}

echoDiffToolOverview() {
    echo ""
    echo -e " Viewing Differences "
    echo ""
    echo -e " Working Directory -> Staging Area -> Most Recent Commit"
    echo -e "  | File Edits |      | stage via |     | commit |"
    echo -e "                      |  git add  |"
    echo ""
    echo -e "\033[1;36m git dt\033[0m - Difference between \033[1;32mWorking Directory\033[0m and \033[1;32mStaging Area\033[0m"
    echo -e "          (Most Recent Commit is if Staging Area is empty)"
    echo -e "\n\033[1;36m git dt-s\033[0m - Difference between \033[1;32mStaging Area\033[0m and \033[1;32mMost Recent Commit\033[0m"
    echo -e "            (nothing if Staging Area is empty)"
    echo -e "\n\033[1;36m git dt-w\033[0m - Difference between \033[1;32mWorking Directory\033[0m and \033[1;32mMost Recent Commit\033[0m"
    echo -e "            (Staging Area is ignored)"
}

function cloneKATRepos() {
	if [ "$#" = 1 ] && ( test "$1" == "?" || test "$1" == "-?" || test "$1" == "/?" ) 
	then	
		showHelp="y"
	fi

	repoType=$1
	repoName=$2

	if [[ $1 != Shared* ]] && [[ $1 != Framework.* ]] && test "$showHelp" != "y" && test "$1" != "ESS" && test "$1" != "Admin" && test "$1" != "ESS.4.1" && test "$1" != "Admin.4.5" && test "$1" != \"Tahiti\"
	then
		badParams="y"
	elif [[ $1 != Shared* ]] && [[ $1 != Framework.* ]] && test "$2" == ""
	then
		badParams="y"
	fi

	if [[ $1 != Shared* ]] && [[ $1 != Framework.* ]] && test "$showHelp" != "y" && test "$1" != "ESS" && test "$1" != "Admin" && test "$1" != "ESS.4.1" && test "$1" != "Admin.4.5" && test "$1" != \"Tahiti\"
	then
		badParams="y"
	fi

	if [ "$showHelp" = "y" ] || [ "$badParams" = "y" ] || [ "$1" = "bash" ]
	then
		echo -e "\n Clones KAT repositories into known folder structure."
	    echo ""
	    echo -e " usage:\tgit clone-btr <type> {clientRepoName}"
	    echo ""
	    echo -e "\033[1;32m type\033[0m: ESS, Admin, ESS.4.1, Admin.4.5, Tahiti, or Shared.* If starts with 'Shared', clientRepoName is not needed."
	    echo -e "\033[1;32m clientRepoName\033[0m: If location does not start with 'Shared', this parameter is name of the client repository to clone."

	    if test "$showHelp" != "y"
	    then
	    	echo -e "\n\033[1;31m Incorrect parameters provided.\033[0m"
	    	exit 1
	    fi

	else
		echo ""

		if [[ $1 == Shared* ]]
		then

			if test "$1" == "Shared.Severance" || test "$1" == "Shared.Bootstrap" || test "$1" == "Shared.Bootstrap.Core" || test "$1" == "Shared.Bootstrap.Admin"
			then
				git clone "git@bitbucket.org:benefittechnologyresources/$repoType.git" $1
			else
				git clone "git@bitbucket.org:benefittechnologyresources/4.1.$repoType.git" $1
			fi

		elif [[ $1 == Framework.* ]]
		then

			cloneFrameworkRepository "$1"

		else

	        bbRepoPrefix=$(getBitbucketRepoPrefix "$1")
	        clientName=$(echo "$2" | awk '{print tolower($0)}')

	        parentFolder=$(getClientRepoDirectoryAndCloneFramework "$1")

			git clone "git@bitbucket.org:benefittechnologyresources/$bbRepoPrefix.$clientName.git" "$parentFolder/$2"

			for var in "${@:3}"; do \
				repo=$(echo "$var" | awk '{print tolower($0)}')
				
				if test "$var" == "Shared.Severance" || test "$var" == "Shared.Bootstrap" || test "$var" == "Shared.Bootstrap.Core" || test "$var" == "Shared.Bootstrap.Admin"
				then
				
					git clone "git@bitbucket.org:benefittechnologyresources/$repo.git" "$parentFolder/$2/$var"
				
				else
					git clone "git@bitbucket.org:benefittechnologyresources/4.1.$repo.git" "$parentFolder/$2/$var"
				fi
			done

			# TODO: Can't perform cd b/c this is ran in a 'sub shell' https://stackoverflow.com/a/255415/166231
			# Asked question here: https://stackoverflow.com/a/46698535/166231
			cd $parentFolder/$2
		fi

	fi
}

getBitbucketRepoPrefix() {

	repoName=""

	if test "ESS" == "$1"; then
		repoName="ESS"
	elif test "ESS.4.1" == "$1"; then
		repoName="4.1"
	elif test "Admin" == "$1"; then
		repoName="Admin"
	elif test "Admin.4.5" == "$1"; then
		repoName="4.5"
	elif test "Tahiti" == "$1"; then
		repoName="Tahiti"
	elif test "$1" == "Shared.Severance" || test "$1" == "Shared.Bootstrap" || test "$1" == "Shared.Bootstrap.Core" || test "$1" == "Shared.Bootstrap.Admin"; then
		repoName="$1"
	elif [[ $1 == Shared* ]]; then
		repoName="4.1.$1"
	else
		repoName="$1"
	fi

	echo "$repoName" | awk '{print tolower($0)}'
}

getClientRepoDirectoryAndCloneFramework() {

	clientRepoDir=""
	
	if test "ESS" = "$1"
	then

		if [ ! -d "C:/BTR/Evolution" ] 
		then
			cloneFrameworkRepository "Framework.Evolution"
		fi
		clientRepoDir="c:/BTR/Evolution/Websites/ESS"
	
	elif test "Admin" = "$1"
	then

		if [ ! -d "C:/BTR/Evolution" ]
		then
			cloneFrameworkRepository "Framework.Evolution"
		fi
		clientRepoDir="c:/BTR/Evolution/Websites/Admin"
	
	elif test "ESS.4.1" = "$1" 
	then
	
		if [ ! -d "C:/BTR.Legacy/MadHatter.4.1" ]
		then
			cloneFrameworkRepository "Framework.4.1"
		fi
		clientRepoDir="C:/BTR.Legacy/MadHatter.4.1/Websites/ESS"
	
	elif test "Admin.4.5" = "$1"
	then
	
		if [ ! -d "C:/BTR.Legacy/MadHatter.4.5" ]
		then
			cloneFrameworkRepository "Framework.4.5"
		fi
		clientRepoDir="C:/BTR.Legacy/MadHatter.4.5/Websites.MadHatterAdmin/Clients"
	
	elif test "Tahiti" = "$1" 
	then

		if [ ! -d "C:/BTR.Legacy/Tahiti" ]
		then
			cloneFrameworkRepository "Framework.Tahiti"
		fi
		clientRepoDir="c:/BTR.Legacy/Tahiti/BTR.Websites.MadHatter/Clients"

	fi
	echo "$clientRepoDir"
}

cloneFrameworkRepository() {

	if test "Framework.4.1" = "$1"
	then

	    git clone "git@bitbucket.org:benefittechnologyresources/btr.madhatter.4.1" "C:/BTR.Legacy/MadHatter.4.1"; \
	    
	    mkdir -p "C:/BTR.Legacy/MadHatter.4.1/Websites/ESS"; \
	    attrib -r "C:/BTR.Legacy/MadHatter.4.1/Websites/ESS"; \
	    mkdir -p "C:/BTR.Legacy/MadHatter.4.1/Assemblies"; \
	    attrib -r "C:/BTR.Legacy/MadHatter.4.1/Assemblies"; \

	    cd "C:/BTR.Legacy/MadHatter.4.1"
	
	elif test "Framework.4.5" = "$1"
	then

	    git clone "git@bitbucket.org:benefittechnologyresources/btr.madhatter.4.5" "C:/BTR.Legacy/MadHatter.4.5"

	    mkdir -p "C:/BTR.Legacy/MadHatter.4.5/Websites.MadHatterAdmin/Clients"
	    attrib -r "C:/BTR.Legacy/MadHatter.4.5/Websites.MadHatterAdmin/Clients"
	    mkdir -p "C:/BTR.Legacy/MadHatter.4.5/Assemblies"
	    attrib -r "C:/BTR.Legacy/MadHatter.4.5/Assemblies"

	    cd "C:/BTR.Legacy/MadHatter.4.5"
	
	elif test "Framework.Tahiti" = "$1"
	then

	    git clone "git@bitbucket.org:benefittechnologyresources/btr.tahiti" "C:/BTR.Legacy/Tahiti"

	    mkdir -p "C:/BTR.Legacy/Tahiti/BTR.Websites.MadHatter/Clients"
	    attrib -r "C:/BTR.Legacy/Tahiti/BTR.Websites.MadHatter/Clients"
	    mkdir -p "C:/BTR.Legacy/Tahiti/Assemblies"
	    attrib -r "C:/BTR.Legacy/Tahiti/Assemblies"

	    cd "C:/BTR.Legacy/Tahiti"

	elif test "Framework.Evolution" = "$1"
	then

	    git clone "git@bitbucket.org:benefittechnologyresources/btr.evolution" "C:/BTR/Evolution"
	    git clone "git@bitbucket.org:benefittechnologyresources/btr.evolution.rble" "C:/BTR/Evolution/BTR.Evolution.RBLe"
	    git clone "git@bitbucket.org:benefittechnologyresources/btr.evolution.service" "C:/BTR/Evolution/BTR.Evolution.Service"

	    mkdir -p "C:/BTR/Evolution/Websites/ESS"
	    attrib -r "C:/BTR/Evolution/Websites/ESS"
	    mkdir -p "C:/BTR/Evolution/Websites/Admin"
	    attrib -r "C:/BTR/Evolution/Websites/Admin"

	    if [ ! -d "C:/BTR/Assemblies" ]
	    then
			mkdir -p "C:/BTR/Assemblies"
			attrib -r "C:/BTR/Assemblies"
	    fi

	    cd "C:/BTR/Evolution"
	fi
}

pullAllRepositories() {
	name=$(basename "$PWD")
	echo -e "\nPulling $name..."

	git pull

	for i in Shared* ; do
		if [ -d "$i" ]; then
			cd "$i"
			echo -e "\nPulling $i..."
			git pull
			cd ..
		fi
	done
}
fetchAllRepositories() {
	name=$(basename "$PWD")
	echo -e "\nFetching $name..."

	git remote update

	for i in Shared* ; do
		if [ -d "$i" ]; then
			cd "$i"
			echo -e "\nFetching $i..."
			git remote update
			cd ..
		fi
	done
}

#Sets defaults on origin main so that git pull, git push don't need remote/branch in command line.
setOrigin () {
	
	if [ "$#" = 1 ] && ( test "$1" == "?" || test "$1" == "-?" || test "$1" == "/?" ) 
	then	
		showHelp="y"
	fi
	if [[ $1 != Shared* ]] && [[ $1 != Framework.* ]] && test "$showHelp" != "y" && test "$1" != "ESS" && test "$1" != "Admin" && test "$1" != "ESS.4.1" && test "$1" != "Admin.4.5" && test "$1" != \"Tahiti\"
	then
		badParams="y"
	fi

	if [ "$#" -gt 2 ] || [ "$showHelp" = "y" ] || [ "$badParams" = "y" ] || [ "$1" = "bash" ]
	then
		echo -e "\n Updates configuration to a known bitbucket repository."
	    echo ""
	    echo -e " usage:\tgit set-origin <type>"
	    echo ""
	    echo -e "\033[1;32m type\033[0m: ESS, Admin, ESS.4.1, Admin.4.5, Tahiti, or Shared.* If starts with 'Shared', clientRepoName is not needed."

	    if test "$showHelp" != "y"
	    then
	    	echo -e "\n\033[1;31m Incorrect parameters provided.  type provided was '$1'.  Param count was $#.\033[0m"
	    	exit 1
	    fi

	else
		echo ""

		bbPrefix=$(getBitbucketRepoPrefix "$1")

		if [[ $1 == Shared* ]]; then \
	
			git remote remove origin
			git remote add origin "git@bitbucket.org:benefittechnologyresources/$bbPrefix.git"

			echo "origin set to git@bitbucket.org:benefittechnologyresources/$bbPrefix.git"
	
		else \
	
			clientName=$(echo "${2-${PWD##*/}}" | awk '{print tolower($0)}')
	
			git remote remove origin
			git remote add origin "git@bitbucket.org:benefittechnologyresources/$bbPrefix.$clientName.git"

			echo "origin set to git@bitbucket.org:benefittechnologyresources/$bbPrefix.$clientName.git"

		fi

		git config branch.main.remote origin
		git config branch.main.merge refs/heads/main
	fi
}

showAliases() {
	# \033[1;31m ... \033[0m - Red font

    echo ""
    echo -e "\033[1;31m Common Git Abbreviations and Helpers\033[0m"
    echo -e " \033[1;36m tfs/browse\033[0m = view the current repository on Conduent TFS"
    echo -e " \033[1;36m gh/browse-gh\033[0m = view the current repository on github.com"
    echo -e " \033[1;36m bb/browse-bb\033[0m = view the current repository on bitbucket.com"
    echo -e " \033[1;36m ac\033[0m = add all files to staging & commit"
    echo -e " \033[1;36m br\033[0m = branch"
    echo -e " \033[1;36m brr\033[0m = ls-remote = list all remote branches without FETCH"
    echo -e " \033[1;36m co\033[0m = checkout (branch)"
    echo -e " \033[1;36m com\033[0m = commit"
    echo -e " \033[1;36m commend\033[0m = before pushing, add files to last commit and update message"
    echo -e " \033[1;36m st\033[0m = condensed status display (similar to \033[1;36mgit status\033[0m)"
    echo -e " \033[1;36m l\033[0m = KAT log display (\033[1;36mgit l /?\033[0m for details)"
    echo -e " \033[1;36m his\033[0m = KAT commit history and graph display"

    echo ""
    echo -e "\033[1;31m File Change Helpers\033[0m"
    echo -e " \033[1;36m u, undo <pattern>\033[0m = undo changes (same as \033[1;36mgit co -- <pattern>\033[0m)"
    echo -e " \033[1;36m undo-all\033[0m = undo *all* changes (same as \033[1;36mgit reset --hard HEAD\033[0m)"
    echo -e " \033[1;36m unstage <pattern>\033[0m = removes files from the Staged area (same as \033[1;36mgit reset -- <pattern>\033[0m)"
    echo -e " \033[1;36m unstage-all\033[0m = removes *ALL* files from the Staged area (same as \033[1;36mgit reset HEAD\033[0m)"
    echo -e " \033[1;36m previous/prev <commit> <file>\033[0m: Pulls a file from previous commit into your working directory."; \
    echo -e " \033[1;36m undelete <file>\033[0m: Recovers a file from the parent of the deleting commit."; \

    echo ""
    echo -e "\033[1;31m Advanced File Change Helpers\033[0m"
    echo -e " \033[1;36m fhs <file> <#>\033[0m: Displays all commits for the specified file (\033[1;36mgit fhs /?\033[0m for help)."
    echo -e " \033[1;36m ch <commit> <commit>\033[0m: Displays files changed between specified commits (\033[1;36mgit ch /?\033[0m for help)."
    echo -e " \033[1;36m ch-b <branch> {branch}\033[0m: Displays files changed between specified branches (\033[1;36mgit ch-b /?\033[0m for help)."
    echo -e " \033[1;36m dt <pattern>\033[0m: Displays differences for files (\033[1;36mgit dt /?\033[0m for parameters/details)."
    echo -e " \033[1;36m dt-c\033[0m: Displays differences between \033[1;32mcommits\033[0m (\033[1;36mgit dt-c /?\033[0m for help)."
    echo -e " \033[1;36m dt-b\033[0m: Displays file differences between \033[1;32mbranches\033[0m."
    echo -e " \033[1;36m dt-s\033[0m: Displays differences between \033[1;32mindex/staging area\033[0m and \033[1;32mHEAD\033[0m (\033[1;36mgit dt-s /?\033[0m for help)."
    echo -e " \033[1;36m dt-w\033[0m: Displays differences between \033[1;32mworking directory\033[0m and \033[1;32mHEAD\033[0m, (\033[1;36mgit dt-w /?\033[0m for help)."

    echo ""
    echo -e "\033[1;31m Repository Helpers\033[0m"
    echo -e " \033[1;36m pull-all\033[0m: Pull all repositories, merging changes in (including /Shared* repositories)."
    echo -e " \033[1;36m fetch-all\033[0m: Pull all repository info, without merging (including /Shared* repositories)."
    echo -e " \033[1;36m clone-btr <type> <name>\033[0m: Clones a KAT repository (\033[1;36mgit clone-btr /?\033[0m for help)."
    echo -e " \033[1;36m set-origin <type>\033[0m: Updates KAT repository configuration (\033[1;36mgit set-origin /?\033[0m for help)."
    echo -e " \033[1;36m co-rb <remote> <branch>\033[0m: Pulls a remote branch and switches to it for editing."; \
    echo -e " \033[1;36m del-rb <remote> <branch>\033[0m: Deletes both the local and remote branches."; \

    echo ""
    echo -e "\033[1;31m Repository Merge Helpers\033[0m"
    echo -e " \033[1;36m sync-with <branch>\033[0m: Pull all commits from <branch> into the current branch (i.e. pulling main commits into feature branch)."
    echo -e " \033[1;36m merge-squash <feature-branch>\033[0m: Pull all changes from <feature-branch> into the current branch for single (merge) commit."

    echo ""
    echo -e "\033[1;31m Repository Detail Helpers\033[0m"
    echo -e " \033[1;36m tracked\033[0m: Displays files tracked in a repository."
    echo -e " \033[1;36m ignored\033[0m: Displays files not tracked in a repository."
    echo -e " \033[1;36m deletes\033[0m: Displays commits with files deleted from a repository (\033[1;36mgit deletes /?\033[0m for help)."
    echo -e " \033[1;36m rf, remove-file\033[0m: Removes file from repository tracking (i.e. file newly added to .gitignore)."

}